# GitHub Actions workflow for Multi-Agent Research Platform
# Automated CI/CD pipeline with Google Cloud Run deployment

name: Deploy to Cloud Run

on:
  push:
    branches:
      - main        # Production deployments
      - develop     # Staging deployments
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:  # Manual trigger
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment'
        required: false
        default: false
        type: boolean

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: multi-agent-platform

jobs:
  # Job 1: Run tests and quality checks
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install UV package manager
      run: |
        pip install uv
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Run linting
      run: |
        uv run flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
        uv run black --check src/
        uv run isort --check-only src/
        
    - name: Run type checking
      run: |
        uv run mypy src/ --ignore-missing-imports
        
    - name: Run unit tests
      run: |
        uv run pytest tests/unit/ -v --cov=src --cov-report=xml
        
    - name: Run integration tests
      env:
        ENVIRONMENT: test
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
      run: |
        uv run pytest tests/integration/ -v
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job 2: Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json
        
    - name: Run safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 3: Build and deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker
        
    - name: Build and push Docker image
      run: |
        IMAGE_NAME=gcr.io/$PROJECT_ID/$SERVICE_NAME
        IMAGE_TAG=$IMAGE_NAME:$GITHUB_SHA
        
        docker build -t $IMAGE_TAG -f deployment/cloud-run/Dockerfile .
        docker tag $IMAGE_TAG $IMAGE_NAME:staging
        docker push $IMAGE_TAG
        docker push $IMAGE_NAME:staging
        
    - name: Deploy to Cloud Run (Staging)
      id: deploy
      run: |
        IMAGE_NAME=gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        
        gcloud run deploy $SERVICE_NAME-staging \
          --image $IMAGE_NAME \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 2 \
          --timeout 300 \
          --max-instances 10 \
          --min-instances 1 \
          --set-env-vars "ENVIRONMENT=staging,GOOGLE_GENAI_USE_VERTEXAI=true" \
          --service-account ${{ secrets.GCP_SERVICE_ACCOUNT }} \
          --tag staging
          
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME-staging --region=$REGION --format="value(status.url)")
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        
    - name: Run smoke tests
      run: |
        sleep 30  # Wait for service to be ready
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME-staging --region=$REGION --format="value(status.url)")
        
        # Health check
        curl -f $SERVICE_URL/health
        
        # Basic API test
        curl -f $SERVICE_URL/status
        
    - name: Create staging deployment comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const serviceUrl = '${{ steps.deploy.outputs.url }}';
          const comment = `ğŸš€ **Staging Deployment Successful**
          
          **Environment:** Staging
          **Service URL:** ${serviceUrl}
          **Git SHA:** ${{ github.sha }}
          
          The staging environment has been updated with the latest changes from this PR.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Job 4: Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker
        
    - name: Build and push Docker image
      run: |
        IMAGE_NAME=gcr.io/$PROJECT_ID/$SERVICE_NAME
        IMAGE_TAG=$IMAGE_NAME:$GITHUB_SHA
        
        docker build -t $IMAGE_TAG -f deployment/cloud-run/Dockerfile .
        docker tag $IMAGE_TAG $IMAGE_NAME:latest
        docker tag $IMAGE_TAG $IMAGE_NAME:stable
        docker push $IMAGE_TAG
        docker push $IMAGE_NAME:latest
        docker push $IMAGE_NAME:stable
        
    - name: Deploy to Cloud Run (Production)
      id: deploy
      run: |
        IMAGE_NAME=gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        
        gcloud run deploy $SERVICE_NAME \
          --image $IMAGE_NAME \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --memory 4Gi \
          --cpu 4 \
          --timeout 600 \
          --max-instances 50 \
          --min-instances 2 \
          --set-env-vars "ENVIRONMENT=production,GOOGLE_GENAI_USE_VERTEXAI=true" \
          --service-account ${{ secrets.GCP_SERVICE_ACCOUNT }} \
          --tag stable
          
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        
    - name: Run production health checks
      run: |
        sleep 60  # Wait longer for production service to be ready
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
        
        # Comprehensive health checks
        curl -f $SERVICE_URL/health
        curl -f $SERVICE_URL/status
        
        # Performance test
        for i in {1..5}; do
          response_time=$(curl -o /dev/null -s -w '%{time_total}\n' $SERVICE_URL/health)
          echo "Health check response time: ${response_time}s"
        done
        
    - name: Create release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          **Deployed to Production**
          
          **Service URL:** ${{ steps.deploy.outputs.url }}
          **Git SHA:** ${{ github.sha }}
          **Deployment Time:** ${{ github.event.head_commit.timestamp }}
          
          **Changes:**
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

  # Job 5: Performance monitoring
  performance-monitor:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always() && (needs.deploy-staging.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run performance tests
      run: |
        # Install artillery for load testing
        npm install -g artillery
        
        # Get service URL
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME-staging --region=$REGION --format="value(status.url)")
        
        # Create performance test configuration
        cat > perf-test.yml << EOF
        config:
          target: $SERVICE_URL
          phases:
            - duration: 60
              arrivalRate: 10
        scenarios:
          - name: "Health check load test"
            requests:
              - get:
                  url: "/health"
          - name: "Status endpoint test"
            requests:
              - get:
                  url: "/status"
        EOF
        
        # Run performance test
        artillery run perf-test.yml --output performance-report.json
        
    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: performance-report.json

  # Job 6: Cleanup on failure
  cleanup:
    name: Cleanup Failed Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    
    steps:
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        
    - name: Cleanup failed deployment
      run: |
        echo "Deployment failed. Performing cleanup..."
        
        # Remove failed deployment tags
        IMAGE_NAME=gcr.io/$PROJECT_ID/$SERVICE_NAME
        gcloud container images delete $IMAGE_NAME:$GITHUB_SHA --quiet || true
        
        echo "Cleanup completed"