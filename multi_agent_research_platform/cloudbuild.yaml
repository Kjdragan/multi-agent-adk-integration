# Google Cloud Build configuration for Multi-Agent Research Platform
# This file defines the build pipeline for automated deployment to Cloud Run

steps:
  # Step 1: Install dependencies and run tests
  - name: 'python:3.11-slim'
    id: 'install-and-test'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing UV package manager..."
        pip install uv
        
        echo "Installing dependencies..."
        uv sync
        
        echo "Running tests..."
        python -m pytest tests/ -v
        
        echo "Running linting checks..."
        flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
        
        echo "Running type checks..."
        mypy src/ --ignore-missing-imports
    env:
      - 'ENVIRONMENT=test'

  # Step 2: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args:
      - 'build'
      - '-t'
      - '${_SERVICE_NAME}:${SHORT_SHA}'
      - '-t'
      - '${_SERVICE_NAME}:latest'
      - '-f'
      - 'deployment/cloud-run/Dockerfile'
      - '.'
    waitFor: ['install-and-test']

  # Step 3: Push Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args:
      - 'push'
      - '${_SERVICE_NAME}:${SHORT_SHA}'
    waitFor: ['build-image']

  # Step 4: Deploy to Cloud Run (staging)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-staging'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}-staging'
      - '--image'
      - '${_SERVICE_NAME}:${SHORT_SHA}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--timeout'
      - '300'
      - '--max-instances'
      - '10'
      - '--min-instances'
      - '1'
      - '--set-env-vars'
      - 'ENVIRONMENT=staging,GOOGLE_GENAI_USE_VERTEXAI=true'
      - '--service-account'
      - '${_SERVICE_ACCOUNT}'
    waitFor: ['push-image']

  # Step 5: Run integration tests against staging
  - name: 'python:3.11-slim'
    id: 'integration-tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Getting staging URL..."
        STAGING_URL=$(gcloud run services describe ${_SERVICE_NAME}-staging --region=${_REGION} --format="value(status.url)")
        
        echo "Running integration tests against staging: $STAGING_URL"
        pip install requests pytest
        STAGING_URL=$STAGING_URL python -m pytest tests/integration/ -v
    env:
      - 'ENVIRONMENT=staging'
    waitFor: ['deploy-staging']

# Conditional production deployment (only on main branch)
  # Step 6: Deploy to production (main branch only)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-production'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - '${_SERVICE_NAME}:${SHORT_SHA}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '4Gi'
      - '--cpu'
      - '4'
      - '--timeout'
      - '600'
      - '--max-instances'
      - '50'
      - '--min-instances'
      - '2'
      - '--set-env-vars'
      - 'ENVIRONMENT=production,GOOGLE_GENAI_USE_VERTEXAI=true'
      - '--service-account'
      - '${_SERVICE_ACCOUNT}'
      - '--tag'
      - 'stable'
    waitFor: ['integration-tests']

# Substitutions (default values, can be overridden)
substitutions:
  _SERVICE_NAME: 'gcr.io/${PROJECT_ID}/multi-agent-platform'
  _REGION: 'us-central1'
  _SERVICE_ACCOUNT: 'multi-agent-platform@${PROJECT_ID}.iam.gserviceaccount.com'

# Build options
options:
  # Use high-performance machine type for faster builds
  machineType: 'E2_HIGHCPU_8'
  # Use substitution variables in all steps
  substitution_option: 'ALLOW_LOOSE'
  # Log streaming
  logging: 'CLOUD_LOGGING_ONLY'

# Build timeout (30 minutes)
timeout: '1800s'

# Build artifacts
artifacts:
  images:
    - '${_SERVICE_NAME}:${SHORT_SHA}'
    - '${_SERVICE_NAME}:latest'

# Build tags for organization
tags:
  - 'multi-agent-platform'
  - 'cloud-run'
  - '${BRANCH_NAME}'
  - '${SHORT_SHA}'